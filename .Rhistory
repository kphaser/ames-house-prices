#validation_frame = valid,  #only used if stopping_rounds > 0
ntrees = 500,
seed = 1)
gbm_fit3 <- h2o.gbm(x = x,
y = y,
training_frame = train_h2o,
model_id = "gbm_fit3",
validation_frame = valid_h2o,  #only used if stopping_rounds > 0
ntrees = 500,
score_tree_interval = 5,      #used for early stopping
stopping_rounds = 3,          #used for early stopping
stopping_metric = "AUTO",      #used for early stopping
stopping_tolerance = 0.005,  #used for early stopping
seed = 1)
gbm_perf1 <- h2o.performance(model = gbm_fit1,
newdata = valid_h2o)
gbm_perf2 <- h2o.performance(model = gbm_fit2,
newdata = valid_h2o)
gbm_perf3 <- h2o.performance(model = gbm_fit3,
newdata = valid_h2o)
gbm_perf1
gbm_perf2
gbm_perf3
h2o.scoreHistory(gbm_fit2)
h2o.scoreHistory(gbm_fit3)
plot(gbm_fit3,
timestep = "number_of_trees",
metric = "RMSE")
plot(gbm_fit3,
timestep = "number_of_trees",
metric = "rmse")
dl_fit1 <- h2o.deeplearning(x = x,
y = y,
training_frame = train_h2o,
model_id = "dl_fit1",
seed = 1)
dl_fit2 <- h2o.deeplearning(x = x,
y = y,
training_frame = train_h2o,
model_id = "dl_fit2",
#validation_frame = valid,  #only used if stopping_rounds > 0
epochs = 20,
hidden= c(10,10),
stopping_rounds = 0,  # disable early stopping
seed = 1)
dl_fit3 <- h2o.deeplearning(x = x,
y = y,
training_frame = train_h2o,
model_id = "dl_fit3",
validation_frame = valid_h2o,  #in DL, early stopping is on by default
epochs = 20,
hidden = c(10,10),
score_interval = 1,           #used for early stopping
stopping_rounds = 3,          #used for early stopping
stopping_metric = "AUTO",     #used for early stopping
stopping_tolerance = 0.005,   #used for early stopping
seed = 1)
dl_perf1 <- h2o.performance(model = dl_fit1,
newdata = valid_h2o)
dl_perf2 <- h2o.performance(model = dl_fit2,
newdata = valid_h2o)
dl_perf3 <- h2o.performance(model = dl_fit3,
newdata = valid_h2o)
dl_perf1
dl_perf2
dl_perf3
h2o.scoreHistory(dl_fit3)
dl_fit3 <- h2o.deeplearning(x = x,
y = y,
training_frame = train_h2o,
model_id = "dl_fit3",
validation_frame = valid_h2o,  #in DL, early stopping is on by default
epochs = 20,
hidden = c(10,10),
score_interval = 1,           #used for early stopping
stopping_rounds = 3,          #used for early stopping
stopping_metric = "AUTO",     #used for early stopping
stopping_tolerance = 0.0005,   #used for early stopping
seed = 1)
dl_perf3 <- h2o.performance(model = dl_fit3,
newdata = valid_h2o)
dl_perf3
gbm_fit3 <- h2o.gbm(x = x,
y = y,
training_frame = train_h2o,
model_id = "gbm_fit3",
validation_frame = valid_h2o,  #only used if stopping_rounds > 0
ntrees = 500,
score_tree_interval = 5,      #used for early stopping
stopping_rounds = 3,          #used for early stopping
stopping_metric = "AUTO",      #used for early stopping
stopping_tolerance = 0.0005,  #used for early stopping
seed = 1)
gbm_perf3 <- h2o.performance(model = gbm_fit3,
newdata = valid_h2o)
gbm_perf3
plot(dl_fit3,
timestep = "epochs",
metric = "rmse")
library(devtools)
install_github("h2oai/h2o-3/h2o-r/ensemble/h2oEnsemble-package")
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper",
"h2o.gbm.wrapper", "h2o.deeplearning.wrapper")
metalearner <- "h2o.glm.wrapper"
library(h2oEnsemble)
fit <- h2o.ensemble(x = x, y = y,
training_frame = train_h2o,
family = "gaussian",
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
pred <- predict(fit, valid_h2o)
head(pred)
pred <- exp(predict(fit, valid_h2o))-1
pred <- predict(fit, valid_h2o)
predictions <- as.data.frame(pred$pred)[,3]  #third column is P(Y==1)
pred$pred
pred$pred[,3]
pred$pred[,2]
pred$pred[,1]
valid_h2o[,y]
rmse
library(Metric)
library(Metrics)
rmse
predictions <- as.data.frame(pred$pred)[,1]
labels <- as.data.frame(valid_h2o[,y])[,1]
rmse(predictions,labels)
h2o.rmse(glm_perf1)
h2o.rmse(glm_perf2)
?h2o.glm
glm_fit3 <- h2o.glm(x = x,
y = y,
training_frame = train_h2o,
model_id = "glm_fit2",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 1
lambda_search = TRUE)
glm_fit3 <- h2o.glm(x = x,
y = y,
training_frame = train_h2o,
model_id = "glm_fit2",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 1,
lambda_search = TRUE)
glm_fit2 <- h2o.glm(x = x,
y = y,
training_frame = train_h2o,
model_id = "glm_fit2",
validation_frame = valid_h2o,
family = "gaussian",
lambda_search = TRUE)
glm_fit3 <- h2o.glm(x = x,
y = y,
training_frame = train_h2o,
model_id = "glm_fit3",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 1,
lambda_search = TRUE)
glm_fit4 <- h2o.glm(x = x,
y = y,
training_frame = train_h2o,
model_id = "glm_fit4",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 0,
lambda_search = TRUE)
glm_perf3 <- h2o.performance(model = glm_fit3,
newdata = valid_h2o)
glm_perf4 <- h2o.performance(model = glm_fit4,
newdata = valid_h2o)
glm_perf3
glm_perf4
glm_perf2
glm_perf1
head(data)
dim(data)
colnames(data)
colnames(train_h2o)
colnames(data)
class(dat)
class(data)
y
x
length(x)
dim(data)
fit <- h2o.ensemble(x = x, y = y,
training_frame = data,
family = "gaussian",
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
pred <- predict(fit, test)
pred$pred[,1]
pred$pred[,3]
pred$pred[,2]
test
x_test
dim(x_test)
dim(data)
pred <- exp(predict(fit, x_test)) - 1
test_h2o <- as.h2o(x_test)
dim(test_h2o)
pred <- exp(predict(fit, test_h2o)) - 1
pred <- predict(fit, test_h2o)
pred$pred[,1]
predictions <- as.data.frame(pred$pred)[,1]
results <- exp(predictions) - 1
head(results)
tail(results)
length(results)
solution <- data.frame(Id=as.integer(rownames(x_test)),SalePrice=results)
write.csv(solution,"ensemble1.csv",row.names=FALSE)
head(solution)
tail(solution)
fit <- h2o.ensemble(x = x, y = y,
training_frame = train_h2o,
family = "gaussian",
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
pred <- predict(fit, valid_h2o)
predictions <- as.data.frame(pred$pred)[,1]
labels <- as.data.frame(valid_h2o[,y])[,1]
rmse(predictions,labels)
h2o.rmse(rf_perf1)
h2o.rmse(rf_perf2)
h2o.rmse(rf_perf3)
glm_perf1
glm_perf2
h2o.rmse(glm_perf1)
h2o.rmse(glm_perf2)
h2o.rmse(glm_perf3)
h2o.rmse(glm_perf4)
h2o.predict
gbm_perf1
gbm_perf2
gbm_perf3
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper",
"h2o.gbm.wrapper", "h2o.deeplearning.wrapper")
metalearner <- "h2o.deeplearning.wrapper"
fit2 <- h2o.ensemble(x = x, y = y,
training_frame = train_h2o,
family = "gaussian",
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
pred <- predict(fit, valid_h2o)
predictions <- as.data.frame(pred$pred)[,1]
labels <- as.data.frame(valid_h2o[,y])[,1]
rmse(predictions,labels)
h2o.rmse(glm_perf1)
h2o.rmse(glm_perf2)
h2o.rmse(glm_perf3)
h2o.rmse(glm_perf4)
h2o.rmse(rf_perf1)
h2o.rmse(rf_perf2)
h2o.rmse(rf_perf3)
dl_perf1
dl_perf2
dl_perf3
gbm_perf1
gbm_perf2
gbm_perf3
learner <- c("glm_fit3", "rf_fit2",
"gbm_fit3", "dl_fit1")
metalearner <- "h2o.glm.wrapper"
fit <- h2o.ensemble(x = x, y = y,
training_frame = train_h2o,
family = "gaussian",
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
h2o.rmse(glm_perf1)
h2o.rmse(glm_perf2)
h2o.rmse(glm_perf3)
h2o.rmse(glm_perf4)
fit <- h2o.glm(x = x,
y = y,
training_frame = data,
model_id = "fit",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 1, # lasso penalty
lambda_search = TRUE)
pred <- predict(fit, test_h2o)
predictions <- as.data.frame(pred$pred)[,1]
results <- exp(predictions) - 1
solution <- data.frame(Id=as.integer(rownames(x_test)),SalePrice=results)
head(solution)
tail(solution)
write.csv(solution,"h2oglm.csv",row.names=FALSE)
h2o.rmse(glm_perf1)
h2o.rmse(glm_perf2)
h2o.rmse(glm_perf3)
h2o.rmse(glm_perf4)
h2o.rmse(rf_perf1)
h2o.rmse(rf_perf2)
h2o.rmse(rf_perf3)
gbm_perf1
gbm_perf2
gbm_perf3
dl_perf1
dl_perf2
dl_perf3
fit1 <- h2o.glm(x = x,
y = y,
training_frame = data,
model_id = "glm_fit2",
validation_frame = valid_h2o,
family = "gaussian",
lambda_search = TRUE)
h2o.performance(fit1)
fit2 <- h2o.glm(x = x,
y = y,
training_frame = data,
model_id = "glm_fit3",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 1, # lasso penalty
lambda_search = TRUE)
fit3 <- h2o.glm(x = x,
y = y,
training_frame = data,
model_id = "glm_fit4",
validation_frame = valid_h2o,
family = "gaussian",
alpha = 0, # ridge penalty
lambda_search = TRUE)
fit4 <- h2o.randomForest(x = x,
y = y,
training_frame = data,
model_id = "rf_fit1",
seed = 1)
h2o.performance(fit2)
h2o.performance(fit3)
h2o.performance(fit4)
fit5 <- h2o.randomForest(x = x,
y = y,
training_frame = data,
model_id = "rf_fit2",
#validation_frame = valid_h2o,  #only used if stopping_rounds > 0
ntrees = 1000,
seed = 1)
colnames(train)
fit6 <- h2o.gbm(x = x,
y = y,
training_frame = data,
model_id = "gbm_fit1",
seed = 1)
fit7 <- h2o.gbm(x = x,
y = y,
training_frame = data,
model_id = "gbm_fit2",
#validation_frame = valid,  #only used if stopping_rounds > 0
ntrees = 500,
seed = 1)
fit8 <- h2o.gbm(x = x,
y = y,
training_frame = data,
model_id = "gbm_fit3",
validation_frame = valid_h2o,  #only used if stopping_rounds > 0
ntrees = 500,
score_tree_interval = 5,      #used for early stopping
stopping_rounds = 3,          #used for early stopping
stopping_metric = "AUTO",      #used for early stopping
stopping_tolerance = 0.0005,  #used for early stopping
seed = 1)
fit9 <- h2o.deeplearning(x = x,
y = y,
training_frame = data,
model_id = "dl_fit1",
seed = 1)
fit10 <- h2o.deeplearning(x = x,
y = y,
training_frame = data,
model_id = "dl_fit2",
#validation_frame = valid,  #only used if stopping_rounds > 0
epochs = 20,
hidden= c(10,10),
stopping_rounds = 0,  # disable early stopping
seed = 1)
learner
learner <- c("h2o.glm.wrapper", "h2o.randomForest.wrapper",
"h2o.gbm.wrapper", "h2o.deeplearning.wrapper")
metalearner <- "h2o.glm.wrapper"
fit11 <- h2o.ensemble(x = x, y = y,
training_frame = data,
family = "gaussian",
learner = learner,
metalearner = metalearner,
cvControl = list(V = 5))
test_h2o
pred1 <- h2o.predict(fit1, test_h2o)
head(pred1)
tail(pred1)
pred1
results1 <- exp(pred1) - 1
results1
pred2 <- h2o.predict(fit2, test_h2o)
results2 <- exp(pred2) - 1
head(results2)
pred3 <- h2o.predict(fit3, test_h2o)
results3 <- exp(pred3) - 1
pred4 <- h2o.predict(fit4, test_h2o)
results4 <- exp(pred4) - 1
pred5 <- h2o.predict(fit5, test_h2o)
results5 <- exp(pred5) - 1
pred6 <- h2o.predict(fit6, test_h2o)
results6 <- exp(pred6) - 1
pred7 <- h2o.predict(fit7, test_h2o)
results7 <- exp(pred7) - 1
pred8 <- h2o.predict(fit8, test_h2o)
results8 <- exp(pred8) - 1
pred9 <- h2o.predict(fit9, test_h2o)
results9 <- exp(pred9) - 1
pred10 <- h2o.predict(fit10, test_h2o)
results10 <- exp(pred10) - 1
pred11 <- h2o.predict(fit11, test_h2o)
h2o.predict(fit11)
pred11 <- predict(fit11, test_h2o)
pred11
attributes(pred11)
pred11$basepred
predictions11 <- as.data.frame(pred11$pred)[,1]
results11 <- exp(pred11) - 1
predictions11
results11 <- exp(predictions11) - 1
results11
head(results11)
avgresults <- (results1+results2+results3+results4+results5+results6+results7+results8+results9+results10+results11)/11
dim(results1)
dim(results2)
dim(results3)
dim(results4)
dim(results5)
dim(results6)
dim(results7)
dim(results8)
dim(results9)
dim(results10)
dim(results11)
results11
avgresults <- (results1+results2+results3+results4+results5+results6+results7+results8+results9+results10+results11)/11
results1+results2
results10+results11
results11
results10
class(results10)
class(results11)
results11 <- as.h2o(results11)
results11
avgresults <- (results1+results2+results3+results4+results5+results6+results7+results8+results9+results10+results11)/11
head(avgresults)
tail(avgresults)
solution <- data.frame(Id=as.integer(rownames(x_test)),SalePrice=avgresults)
avgresults
as.integer(rownames(x_test)
)
avgresults
avgresults[,1]
avgresults[1]
solution <- data.frame(Id=as.integer(rownames(x_test)),SalePrice=avgresults)
class(x_test)
class(avgresults)
avgresults <- as.data.frame(avgresults)
avgresults
solution <- data.frame(Id=as.integer(rownames(x_test)),SalePrice=avgresults)
solution
solutions[,2]
solution[,2]
str(solution)
solution[,2]
colnames(solution)[,2] <- "SakePrice"
dim(solution)
colnames(solution)[,2]
colnames(solution)[2]
colnames(solution)[2] <- "SalePrice"
head(solution)
solution[2]
solution[2] <- round(solution[2],2)
solution
head(solution)
write.csv(solution,"h2oavgmodel.csv",row.names=FALSE)
colnames(train)
removeVars
removeVar
summary(train$Street)
summary(train$SaleCondition)
summary(train$ScreenPorch)
summary(train$PavedDrive)
summary(train$Utilities)
summary(train$LotConfig)
summary(train$ExterCond)
summary(train$SaleType)
dim(train)
colnames(train)
ggplot(train,aes(x=SalePrice))+geom_histogram(binwidth=.5,colour="black",fill="white")
library(ggplot2)
library(dplyr)
library(caret)
library(Metrics)
library(moments)
library(VIM)
library(h2o)
library(h2oEnsemble)
train <- read.csv("../data/train.csv",stringsAsFactors=FALSE)
test <- read.csv("../data/test.csv",stringsAsFactors=FALSE)
ggplot(train,aes(x=SalePrice))+geom_histogram(binwidth=.5,colour="black",fill="white")
