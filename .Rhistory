plot(fit)
boxplot(split(residuals(fit),cycle(residuals(fit))),names=month.abb,col="lightblue",xlab="Month")
(summary(fit))
dwtest(fit,alt="two.sided")
summary(fit)
# create data frame with future values to be forecasted on
future_data = data.frame(surf_fest = rep(0, 36))
future_data[c(3,15,27),] = 1
# make the forecast
fcast = forecast(fit, newdata=future_data)
fcast
# forecast values
exp(fcast$mean)
# lower prediction interval bounds
exp(fcast$lower)
# upper prediction interval bounds
exp(fcast$upper)
plot(texasgas)
fit1 = lm(exp(consumption)~price,data=texasgas)
fit1 = lm(exp(consumption)~exp(price),data=texasgas)
fit1 = lm(consumption~exp(price),data=texasgas)
texasgas
pricep = pmax(texasgas$price-60,0)
fit2 = lm(consumption~price+pricep,data=texasgas)
p = 30:60; z = pmax(x-60,0)
pricep = pmax(texasgas$price-60,0)
fit2 = lm(consumption~price+pricep,data=texasgas)
p = 30:60; z = pmax(p-60,0)
fcast2 = forecast(fit2,newdata=data.frame(price=p,pricep=z))
plot(jitter(consumption) ~ jitter(price), data=texasgas)
lines(p,fcast2$mean,col="red")
fit3 = lm(consumption~price+I(price^2),data=texasgas)
summary(fit3)
fit1 = lm(consumption~exp(price),data=texasgas)
summary(fit1)
?pmax
pricep
CV(fit1)
CV(fit3)
CV(fit1)
CV(fit2)
CV(fit3)
plot(residuals(fit1))
plot(residuals(fit2))
plot(residuals(fit3))
plot(plastics)
plastics
fit = decompose(plastics,type="multiplicative")
plot(fit)
padj = seasadj(fit)
plot(padj)
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[1] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit)
plot(padj2)
plastics2
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[1] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit)
plot(padj2)
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[1] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit2)
plot(padj2)
padj2
padj
plastics2
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[30] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit2)
plot(padj2)
plastics2
attributes(padj2)
padj2
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[30] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit2)
padj2
plot(padj2)
plastics3 = plastics
plastics3[60] = plastics4[60] + 500 # add to last observation
plastics3 = plastics
plastics3[60] = plastics3[60] + 500 # add to last observation
fit3 = decompose(plastics3,type="multiplicative")
padj3 = seasadj(fit3)
padj3
plot(padj3)
fcast = forecast(padj,method="drift")
fit
plot(rwf(padj,drift=TRUE))
rwf(padj,drift=TRUE)
plot(rwf(padj,drift=TRUE))
rwf(padj,drift=TRUE)
plot(rwf(padj,drift=TRUE),main="Random walk with drift forecasts of seasonally adjusted data")
fcast = forecast(fit,method="rwf")
reseasonalfit = rwf(fit,drift=TRUE)
fit
attributes(fit)
padj
fit
fit$seasonal
padj+fit$seasonal
padj
reseasoned = padj + fit$seasonal
rwf(reseasoned,drift=TRUE)
plot(rwf(reseasoned,drift=TRUE))
boxplot(split(residuals(fit),cycle(residuals(fit))),names=month.abb,col="lightblue",xlab="Month",main="Boxplot of Residuals by Month")
dat <- rep(1,10)
ma(dat,order=7,centre=FALSE)
ma(dat,order=5,centre=FALSE)
?ma
1/8
1/6
pricep
?pmax
length(p)
p
length(texasgas)
nrows(texasgas)
nrow(texasgas)
a
texasgas2 = texasgas # make a copy of original dataset
texasgas2$a1 = ifelse(price<=60,1,0)
attach(texasgas)
texasgas2 = texasgas # make a copy of original dataset
texasgas2$a1 = ifelse(texasprice<=60,1,0)
texasgas2$a1 = ifelse(price<=60,1,0)
texasgas2
texasgas2$a2 = ifelse(price<=60,a2=price,0)
texasgas2$a2 = ifelse(price<=60,texasgas$a2=price,0)
texasgas2$a2 = rep(0,20)
texasgas$a2[1:13] = texasgas$price[1:13]
texasgas2$a2 = ifelse(a1==1,a2==price,0)
texasgas2$a2 = ifelse(texasgas$a1==1,a2==price,0)
a1
texasgas2$a2 = texasgas2$price*texasgas2$a1
texasgas2
texasgas2$b1 = ifelse(price>60,1,0)
texasgas2
texasgas2$b2 = texasgas2$price*texasgas2$b1
texasgas2
fit2 = lm(consumption~a1+a2+b1+b2,data=texasgas2)
summary(fit2)
fit1 = lm(consumption~exp(price),data=texasgas)
summary(fit1)
plot(fit1)
CV(fit1)
CV(fit2)
CV(fit3)
fit3 = lm(consumption~price+I(price^2),data=texasgas)
summary(fit3)
CV(fit3)
CV(fit2)
CV(fit1)
plot(residuals(fit2))
future_price = c(40,60,80,100,120)
fcast = forecast(fit2,newdata=future_price)
future_gas = data.frame(price=c(40,60,80,100,120),a1=c(1,1,0,0,0),a2=c(40,60,0,0,0),b1=c(0,0,1,1,1),b2=c(0,0,80,100,120))
fcast = forecast(fit2,newdata=future_gas)
future_gas = data.frame(a1=c(1,1,0,0,0),a2=c(40,60,0,0,0),b1=c(0,0,1,1,1),b2=c(0,0,80,100,120))
fcast = forecast(fit2,newdata=future_gas)
plot(fcast)
fit2
texasgas2
fcast
attributes(fcast)
plot(fcast$mean)
lines(fcast$lower)
plot(fcast$upper)
attributes(fcast$upper)
plot(fcast)
library(updateR)
require(fpp)
require(forecast)
plot(fancy)
plot(log(fancy))
# create the dummy variables for surfing festival
log_fancy = log(fancy)
surf_fest = rep(0, length(fancy))
surf_fest[seq_along(surf_fest)%%12 == 3] <- 1
surf_fest[3] <- 0
surf_fest = ts(surf_fest, freq = 12, start=c(1987,1))
mydata <- data.frame(
log_fancy,
surf_fest
)
# fit the linear regression model
fit = tslm(log_fancy ~ trend + season + surf_fest, data=mydata)
plot(residuals(fit))
plot(fit)
boxplot(split(residuals(fit),cycle(residuals(fit))),names=month.abb,col="lightblue",xlab="Month",main="Boxplot of Residuals by Month")
fit1 = lm(consumption~exp(price),data=texasgas)
summary(fit1)
attach(texasgas)
texasgas2 = texasgas # make a copy of original dataset
texasgas2$a1 = ifelse(price<=60,1,0)
texasgas2$a2 = texasgas2$price*texasgas2$a1
texasgas2$b1 = ifelse(price>60,1,0)
texasgas2$b2 = texasgas2$price*texasgas2$b1
fit2 = lm(consumption~a1+a2+b1+b2,data=texasgas2)
summary(fit2)
attach(texasgas)
texasgas2 = texasgas # make a copy of original dataset
texasgas2$a1 = ifelse(price<=60,1,0)
texasgas2$a2 = texasgas2$price*texasgas2$a1
texasgas2$b1 = ifelse(price>60,1,0)
texasgas2$b2 = texasgas2$price*texasgas2$b1
fit2 = lm(consumption~a1+a2+b1+b2,data=texasgas2)
summary(fit2)
plot(fit2$residuals)
fit3 = lm(consumption~price+I(price^2),data=texasgas)
summary(fit3)
plot(fit3$residuals)
CV(fit1)
CV(fit2)
CV(fit3)
plot(residuals(fit1))
plot(residuals(fit2))
plot(residuals(fit3))
future_gas = data.frame(a1=c(1,1,0,0,0),a2=c(40,60,0,0,0),b1=c(0,0,1,1,1),b2=c(0,0,80,100,120))
fcast = forecast(fit2,newdata=future_gas)
fcast
future_price = c(40,60,80,100,120)
fcast = forecast(fit3,newdata=future_price)
fcast
fcast = forecast(fit3,newdata=c(40,60,80,100,120)
fcast
fcast = forecast(fit3,newdata=c(40,60,80,100,120))
fcast
future_price = c(40,60,80,100,120)
fcast = forecast(fit3,newdata=data.frame(price=future_price))
fcast
attributes(fcast)
plot(fcast)
plot(fcast$mean,type="l")
lines(fcast$lower)
lines(fcast$pper)
lines(fcast$upper)
plot(consumptions~price+I(price^2),data=texasgas)
plot(consumption~price+I(price^2),data=texasgas)
lines(future_price,fcast$mean,col="red")
plot(consumption~price,data=texasgas)
lines(future_price,fcast$mean,col="red")
plot(consumption~price,data=texasgas)
lines(future_price,fcast$mean,col="red")
lines(future_price,fcast$upper,col="blue")
plot(consumption~price,data=texasgas)
lines(future_price,fcast$mean,col="red")
lines(fcast$upper,col="blue")
lines(future_price,fcast$lower,col="blue")
plot(consumption~price,data=texasgas)
lines(future_price,fcast$mean,col="red")
lines(fcast$upper,col="blue")
lines(fcast$lower,col="blue")
attributes(fcast)
fcast$upper
fcast
plot(consumption~price,data=texasgas)
lines(future_price,fcast$mean,col="red")
lines(future_price,fcast$upper[,2],col="blue")
plot(consumption~price,data=texasgas)
lines(future_price,fcast$mean,col="red")
lines(future_price,fcast$upper[,2],col="blue")
lines(future_price,fcast$lower[,2],col="blue")
plot(consumption~price,data=texasgas,ylim=c(0,140))
lines(future_price,fcast$mean,col="red")
lines(future_price,fcast$upper[,2],col="blue")
lines(future_price,fcast$lower[,2],col="blue")
cor(texasgas$price,texasgas$I(price^2))
cor(texasgas$price)
cor(texasgas$price,I(texasgas$price^2))
I(texasgas$price^2)
texasgas$price
texasgas$price^2
cor(texasgas$price,texasgas$price^2)
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=TRUE)
ma3x5 = ma(dat,order=5,centre=TRUE)
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=TRUE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=FALSE)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(ma5,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma2x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=TRUE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=15,centre=TRUE)
?ma
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=15,centre=TRUE)
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=15,centre=TRUE)
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=TRUE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=FALSE)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=TRUE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(dat,order=7,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=FALSE)
ma7
attributes(ma7)
beer2 <- window(ausbeer,start=1992)
ma7 = ma(beer2,order=7,centre=FALSE)
ma7
ma5 = ma(beer2,order=5,centre=FALSE)
ma3x5 = ma(beer2,order=3,centre=FALSE)
ma3x5
ma5 = ma(beer2,order=5,centre=FALSE)
ma3x5 = ma(beer2,order=3,centre=TRUE)
ma3x5
beer3 <- window(ausbeer,start=1992)
ma5 = ma(beer3,order=5,centre=FALSE)
ma3x5 = ma(beer3,order=3,centre=TRUE)
ma3x5
dat = rep(1,10)
ma7 = ma(dat,order=7,centre=FALSE)
ma7
dat = rep(1,10)
ma3x5 = ma(ma(dat,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(dat,order=7,centre=FALSE)
ma7
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(w,order=7,centre=FALSE)
ma7
ma3x5 = ma(ma(w,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
ma3x5 = ma(ma(w,order=5,centre=FALSE),order=3,centre=TRUE)
ma3x5
ma3x5 = ma(ma(w,order=5,centre=TRUE),order=3,centre=TRUE)
ma3x5
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(w,order=7,centre=FALSE)
ma7
w2 = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma3x5 = ma(ma(w2,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(w,order=7,centre=FALSE)
ma7
dat = seq(0,1,by=0.1)
ma7 = ma(dat,order=7,centre=FALSE)
ma7
ma3x5 = ma(ma(dat,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
require(fpp)
require(forecast)
fancy
library(forecast)
fancy
library(fpp)
fancy
# create the dummy variables for surfing festival
log_fancy = log(fancy)
surf_fest = rep(0, length(fancy))
surf_fest[seq_along(surf_fest)%%12 == 3] <- 1
surf_fest[3] <- 0
surf_fest = ts(surf_fest, freq = 12, start=c(1987,1))
mydata <- data.frame(
log_fancy,
surf_fest
)
# fit the linear regression model
fit = tslm(log_fancy ~ trend + season + surf_fest, data=mydata)
surf_fest
surf_fest = rep(0, length(fancy))
surf_fest[seq_along(surf_fest)%%12 == 3] <- 1
surf_fest[3] <- 0
surf_fest
dummy_var <- rep(0, length(mydata))
dummy_var[seq_along(dummy_var)%%4 == 3] <- 1
dummy_var = ts(dummy_var, freq = 12, start=c(1960,1))
dummy_var
mydata = rep(1,20)
dummy_var <- rep(0, length(mydata))
dummy_var[seq_along(dummy_var)%%4 == 3] <- 1
dummy_var = ts(dummy_var, freq = 12, start=c(1960,1))
dummy_var
mydata2 <- data.frame(mydata$y,surf_fest)
mydata2 <- data.frame(mydata,dummy_var)
mydata2
fit = tslm(y ~ trend + season + dummy_var, data=mydata2)
fit = tslm(mydata ~ trend + season + dummy_var, data=mydata2)
class(dummy_var)
class(mydata)
variable to your tslm function.
mydata <- ts(data, freq=12, start=c(1960,1))
install.packages(c("servr", "knitr"), repos = "http://cran.rstudio.com")
system('jekyll')
servr::jekyll()
ls
ls()
list.files()
?source
library(sparklyr)
install.packages("sparklyr")
spark_install()
library(sparklyr)
spark_install()
?spark_install
spark_install(version = "1.6.2")
sc <- spark_connect(master="local")
exit
exit()
ls
list.files()
cd
cd()
ls
servr::jekyll()
fit = decompose(plastics,type="multiplicative")
require(fpp)
require(forecast)
fit = decompose(plastics,type="multiplicative")
plot(fit)
padj = seasadj(fit)
plot(padj)
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[30] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit2)
padj2
plot(padj2)
plastics3 = plastics
plastics3[60] = plastics3[60] + 500 # add to last observation
fit3 = decompose(plastics3,type="multiplicative")
padj3 = seasadj(fit3)
padj3
plot(padj3)
rwf(padj,drift=TRUE)
plot(rwf(padj,drift=TRUE),main="Random walk with drift forecasts of seasonally adjusted data")
reseasoned = padj * fit$seasonal
rwf(reseasoned,drift=TRUE)
plot(rwf(reseasoned,drift=TRUE))
rm(list=ls())
require(fpp)
require(forecast)
require(fpp)
require(forecast)
plot(fancy)
plot(log(fancy))
install.packages("sparklyr")
library(sparklyr)
spark_install(version="1.6.2")
devtools::install_github("rstudio/sparklyr")
library(sparklyr)
sc <- spark_connect(master="local")
spark_install()
library(sparklyr)
sc <- spark_connect(master="local")
sc
library(dplyr)
iris_tbl <- copy_to(sc, iris)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights")
batting_tbl <- copy_to(sc, Lahman::Batting, "batting")
install.packages("leaflet")
require(fpp)
require(forecast)
require(fpp)
require(forecast)
install.packages("knitr")
getwd()
library(data.table)
library(forecast)
source("updateR.R")
library(forecast)
library('ProjectTemplate')
getwd()
setwd("C:/Users/kphas_000/Dropbox/MSPA/PREDICT_413/Final/")
list.files()
create.project('ames-housing-prices')
list.files()
getwd()
setwd("./ames-housing-prices/")
getwd()
