ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=FALSE)
ma2x5 = ma(ma5,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma2x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=TRUE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=TRUE)
ma5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=15,centre=TRUE)
?ma
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=15,centre=TRUE)
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=15,centre=TRUE)
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=TRUE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=FALSE)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma5 = ma(dat,order=5,centre=TRUE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5)
ma3x5
dat = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(dat,order=7,centre=FALSE)
ma2x5 = ma(dat,order=5,centre=FALSE)
ma3x5 = ma(dat,order=5,centre=FALSE)
ma7
attributes(ma7)
beer2 <- window(ausbeer,start=1992)
ma7 = ma(beer2,order=7,centre=FALSE)
ma7
ma5 = ma(beer2,order=5,centre=FALSE)
ma3x5 = ma(beer2,order=3,centre=FALSE)
ma3x5
ma5 = ma(beer2,order=5,centre=FALSE)
ma3x5 = ma(beer2,order=3,centre=TRUE)
ma3x5
beer3 <- window(ausbeer,start=1992)
ma5 = ma(beer3,order=5,centre=FALSE)
ma3x5 = ma(beer3,order=3,centre=TRUE)
ma3x5
dat = rep(1,10)
ma7 = ma(dat,order=7,centre=FALSE)
ma7
dat = rep(1,10)
ma3x5 = ma(ma(dat,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(dat,order=7,centre=FALSE)
ma7
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(w,order=7,centre=FALSE)
ma7
ma3x5 = ma(ma(w,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
ma3x5 = ma(ma(w,order=5,centre=FALSE),order=3,centre=TRUE)
ma3x5
ma3x5 = ma(ma(w,order=5,centre=TRUE),order=3,centre=TRUE)
ma3x5
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(w,order=7,centre=FALSE)
ma7
w2 = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma3x5 = ma(ma(w2,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
w = c(0.067,0.133,0.2,0.2,0.2,0.133,0.067)
ma7 = ma(w,order=7,centre=FALSE)
ma7
dat = seq(0,1,by=0.1)
ma7 = ma(dat,order=7,centre=FALSE)
ma7
ma3x5 = ma(ma(dat,order=5,centre=FALSE),order=3,centre=FALSE)
ma3x5
require(fpp)
require(forecast)
fancy
library(forecast)
fancy
library(fpp)
fancy
# create the dummy variables for surfing festival
log_fancy = log(fancy)
surf_fest = rep(0, length(fancy))
surf_fest[seq_along(surf_fest)%%12 == 3] <- 1
surf_fest[3] <- 0
surf_fest = ts(surf_fest, freq = 12, start=c(1987,1))
mydata <- data.frame(
log_fancy,
surf_fest
)
# fit the linear regression model
fit = tslm(log_fancy ~ trend + season + surf_fest, data=mydata)
surf_fest
surf_fest = rep(0, length(fancy))
surf_fest[seq_along(surf_fest)%%12 == 3] <- 1
surf_fest[3] <- 0
surf_fest
dummy_var <- rep(0, length(mydata))
dummy_var[seq_along(dummy_var)%%4 == 3] <- 1
dummy_var = ts(dummy_var, freq = 12, start=c(1960,1))
dummy_var
mydata = rep(1,20)
dummy_var <- rep(0, length(mydata))
dummy_var[seq_along(dummy_var)%%4 == 3] <- 1
dummy_var = ts(dummy_var, freq = 12, start=c(1960,1))
dummy_var
mydata2 <- data.frame(mydata$y,surf_fest)
mydata2 <- data.frame(mydata,dummy_var)
mydata2
fit = tslm(y ~ trend + season + dummy_var, data=mydata2)
fit = tslm(mydata ~ trend + season + dummy_var, data=mydata2)
class(dummy_var)
class(mydata)
variable to your tslm function.
mydata <- ts(data, freq=12, start=c(1960,1))
install.packages(c("servr", "knitr"), repos = "http://cran.rstudio.com")
system('jekyll')
servr::jekyll()
ls
ls()
list.files()
?source
library(sparklyr)
install.packages("sparklyr")
spark_install()
library(sparklyr)
spark_install()
?spark_install
spark_install(version = "1.6.2")
sc <- spark_connect(master="local")
exit
exit()
ls
list.files()
cd
cd()
ls
servr::jekyll()
fit = decompose(plastics,type="multiplicative")
require(fpp)
require(forecast)
fit = decompose(plastics,type="multiplicative")
plot(fit)
padj = seasadj(fit)
plot(padj)
plastics2 = plastics # duplicate dataset so we don't alter the original
plastics2[30] = plastics2[30] + 500 # add 500 to middle observation
fit2 = decompose(plastics2,type="multiplicative")
padj2 = seasadj(fit2)
padj2
plot(padj2)
plastics3 = plastics
plastics3[60] = plastics3[60] + 500 # add to last observation
fit3 = decompose(plastics3,type="multiplicative")
padj3 = seasadj(fit3)
padj3
plot(padj3)
rwf(padj,drift=TRUE)
plot(rwf(padj,drift=TRUE),main="Random walk with drift forecasts of seasonally adjusted data")
reseasoned = padj * fit$seasonal
rwf(reseasoned,drift=TRUE)
plot(rwf(reseasoned,drift=TRUE))
rm(list=ls())
require(fpp)
require(forecast)
require(fpp)
require(forecast)
plot(fancy)
plot(log(fancy))
install.packages("sparklyr")
library(sparklyr)
spark_install(version="1.6.2")
devtools::install_github("rstudio/sparklyr")
library(sparklyr)
sc <- spark_connect(master="local")
spark_install()
library(sparklyr)
sc <- spark_connect(master="local")
sc
library(dplyr)
iris_tbl <- copy_to(sc, iris)
flights_tbl <- copy_to(sc, nycflights13::flights, "flights")
batting_tbl <- copy_to(sc, Lahman::Batting, "batting")
install.packages("leaflet")
require(fpp)
require(forecast)
require(fpp)
require(forecast)
install.packages("knitr")
getwd()
library(data.table)
library(forecast)
source("updateR.R")
library(forecast)
library('ProjectTemplate')
getwd()
setwd("C:/Users/kphas_000/Dropbox/MSPA/PREDICT_413/Final/")
list.files()
create.project('ames-housing-prices')
list.files()
getwd()
setwd("./ames-housing-prices/")
getwd()
library(ProjectTemplate)
load.project()
head(train)
head(test)
nrow(train)
nrow(test)
str(train)
str(test)
plot(train$SalePrice)
head(train$YrSold)
pairs(train)
anyNA(train)
hist(train$SalePrice)
hist(log(train$SalePrice))
hist(log(train$SalePrice+1))
summary(train$SalePrice)
summary(train)
corrplot
corplot
summary(train)
str(train)
summary(train)
summary(train$LotFrontage,train$MasVnrType,train$MasVnrArea,train$BsmtFinSF1,train$BsmtFinSF2,train$Electrical,train$GarageYrBlt)
summary(c(train$LotFrontage,train$MasVnrType,train$MasVnrArea,train$BsmtFinSF1,train$BsmtFinSF2,train$Electrical,train$GarageYrBlt))
summary(train$LotFrontage,train$MasVnrType,train$MasVnrArea,train$BsmtFinSF1,train$BsmtFinSF2,train$Electrical,train$GarageYrBlt)
summary(train$LotFrontage)
summary(train$MasVnrType)
summary(train$MasVnrArea)
summary(train$BsmtFinSF1)
summary(train)
library(VIM)
dim(train)
nrow(train)
nrow(unique(train))
is.na(train)
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
library(data.table)
train[,(cat_var) := lapply(.SD, as.factor), .SDcols = cat_var]
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
cat_car
boxplot(train$SalePrice,col="lightblue")
library(ggplot2)
library(data.table)
library(caret)
library(VIM)
library(mice)
library(rpart)
library(ProjectTemplate)
load.project()
head(train)
head(test)
nrow(train)
nrow(test)
str(train)
str(test)
dim(train)
summary(train)
str(train)
plot(train$SalePrice)
hist(train$SalePrice)
qqnorm(train$SalePrice)
qqline()
qqline(train$SalePrice)
hist(log(train$SalePrice+1))
boxplot(train$SalePrice,col="lightblue")
par(mfrow=c(1,2))
boxplot(train$SalePrice,col="lightblue")
boxplot(log(train$SalePrice+1),col="green")
par(mfrow=c(1,1))
boxplot(log(train$SalePrice+1),col="red")
par(mfrow=c(1,2))
boxplot(train$SalePrice,col="lightblue")
boxplot(log(train$SalePrice+1),col="red")
par(mfrow=c(1,1))
hist(train$SalePrice,"month")
hist(train$SalePrice,"year")
nrow(train)
nrow(unique(train))
cor(train)
cat_var <- names(train)[which(sapply(train, is.character))]
cat_var
which(sapply(train, is.character))
sapply(train, is.character)
str(train)
is.character(train)
is.factor(train)
is.fac
is.factor
is.factor(train)
which(sapply(train, is.factor))
which(sapply(train, is.numeric))
summary(train$MSSubClass)
head(train$MSSubClass,100)
cat_var <- names(train)[which(sapply(train, is.factor))]
cat_var
cat_car <- c(cat_var, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
cat_car
cat_col <- names(train)[which(sapply(train, is.factor))]
cat_var <- c(cat_col, 'BedroomAbvGr', 'HalfBath', ' KitchenAbvGr','BsmtFullBath', 'BsmtHalfBath', 'MSSubClass')
numeric_var <- names(train)[which(sapply(train, is.numeric))]
num_var <- names(train)[which(sapply(train, is.numeric))]
num_var
any(num_var=cat_var)
any(num_var==cat_var)
num_var==cat_var
train_cat <- train[,.SD, .SDcols = cat_var]
train_cont <- train[,.SD,.SDcols = num_var]
train[,.SD]
summary(train[,.SD, .SDcols =numeric_var])
summary(train[,.SD, .SDcols =num_var])
library(data.table)
summary(train[,.SD, .SDcols =num_var])
num_var
cat_var
summary(train[,.SD, num_var])
summary(train[,.SD, by=num_var])
summary(train[,.SD, .SDcols = num_var])
colSums(sapply(train, is.na))
summary(train[,.SD,.SDcols = num_var])
?cor
library(corrplot)
doPlots
?doPlots
library(ggplot2)
library(dplyr)
library(data.table)
library(corrplot)
library(caret)
library(VIM)
library(mice)
library(rpart)
library(ProjectTemplate)
load.project()
train
names(train)
levels
levels(train$Alley)
levels(train$BsmtQual)
summary(train)
No
which(train$Alley=="NA")
which(train$Alley==NA)
?which
train[Alley,Alley=="NA",]
train[,Alley=="NA",]
train[,,]
?data.table
train[Alley=="NA"]
train <- data.table(train)
train
train[Alley=="NA"]
train[Alley==NA]
levels(train$Alley)
which(train$Alley=="NA")
which(train$Alley==NA)
head(train$Alley,100)
head(train)
train$Alley[is.na(train$Alley)]
train$Alley[is.na(train$Alley)] <- "No"
is.na(train$Alley)
which(is.na(train$Alley))
train[is.na(train$Alley)]
train$Alley[is.na(train$Alley)]
train[-1]
addNoAnswer <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "None")))
return(x)
}
addNoAnswer(train$Alley)
train$Alley[is.na(train$Alley)] <- "None"
train$Alley[is.na(train$Alley)]
library(forcats)
install.packages(forcats)
install.packages("forcats")
library(forcats)
fct_explicit_na(train$Alley)
?fct_explicit_na
train$Alley[is.na(train$Alley)]
addNoneLevel <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "None")))
return(x)
}
train$Alley2 <- addNoneLevel(train$Alley)
train$Alley2
train$Alley2[is.na(train$Alley2)] <- "None"
train$Alley2
str(train$Alley2)
addNoneLevel(train$BsmtQual)
?Factor
?factor
addLevel <- function(x,y){
if(is.factor(x)) return(factor(x, levels=c(levels(x), y)))
return(x)
}
addLevel(train$Alley,"None")
addLevel(train$Alley,None)
addLevel <- function(x,y){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "y")))
return(x)
}
addLevel(train$Alley,None)
addNoneLevel <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "None")))
return(x)
}
for (col in )
train$Alley2 <- addNoneLevel(train$Alley)
train$Alley2[is.na(train$Alley2)] <- "None"
train$Alley2
levels(train$Alley2)
okNA <- c("Alley", "BsmtQual", "BsmtCond", "BsmtExposure", "BsmtFinType1", "BsmtFinType2", "GarageType", "GarageFinish", "GarageQual", "GarageCond", "PoolQC", "Fence", "MiscFeature")
train$Alley[is.na(train$Alley)]
addNoneLevel <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "None")))
return(x)
}
test
for (col in okNA) {
train$col <- addNoneLevel(train$col)
train$col[is.na(train$col)] <- "None"
}
for (col in okNA)
{}
ok_na <- c(Alley, BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
okNA
names(okNA)
ok_na <- c(train$Alley, train$BsmtQual, BsmtCond, BsmtExposure, BsmtFinType1, BsmtFinType2, GarageType, GarageFinish, GarageQual, GarageCond, PoolQC, Fence, MiscFeature)
ok_na <- c(train$Alley, train$BsmtQual, train$BsmtCond, train$BsmtExposure, train$BsmtFinType1, train$BsmtFinType2,
train$GarageType, train$GarageFinish, train$GarageQual, train$GarageCond, train$PoolQC, train$Fence, train$MiscFeature)
ok_na
ok_na[1]
ok_na[,1]
dim(ok_na)
head(ok_na)
apply(train[,okNA],2,addNoneLevel)
train[,okNA]
train
train[okNA]
train[,okNA]
train[,okNA,]
apply(train[,okNA],1,addNoneLevel)
apply(train[,okNA],2,function(x) {if(is.factor(x)) return(factor(x, levels=c(levels(x), "None")))})
dim(train[,okNA])
train[,c("Alley")]
train[c("Alley","Fence")]
train[,c(Alley,Fence)]
train[Fence]
train[,Fence]
rm(data.table)
addNoneLevel
train[,.(Alley,Fence)]
train[,list(Alley,Fence)]
train[,list(okNA)]
train[,.(okNA)]
train[,.SD,.SDcols=c(1:2)]
train[,okNA,with=FALSE]
apply(train[,okNA,with=FALSE],2,addNoneLevel})
apply(train[,okNA,with=FALSE],2,addNoneLevel)
train[,okNA,with=FALSE]
x <- apply(train[,okNA,with=FALSE],2,addNoneLevel)
x
x[,,with=FALSE]
train[,okNA,with=FALSE]
sapply(train[,okNA,with=FALSE],addNoneLevel)
colwise
library(plur)
library(plyr)
colwise
colwise(addNoneLevel)(train[,okNA,with=FALSE])
levels(train$GarageType)
levels(train$GarageFinish)
colwise(addNoneLevel)(train[,okNA,with=FALSE])
addNoneLevel(train$GarageType)
head(train$GarageType)
addNoneLevel <- function(x){
if(is.factor(x)) return(factor(x, levels=c(levels(x), "None")))
x <- x
return(x)
}
addNoneLevel(train$GarageType)
levels(train$GarageType)
levels(train$Alley)
levels(train$Alley) <- c(levels(train$Alley),"None")
levels(train$Alley)
head(train$Alley)
train$Alley[is.na(train$Alley)] <- "None"
head(train$Alley)
class(train$Alley)
hello <- c(a,b,c)
levels(train$Alley)
library(ProjectTemplate)
load.project()
search()
train[,]
train
test
